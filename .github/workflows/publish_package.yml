name: Publish package test

on:
  push:
    branches:
      - test-2fa-publish

  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish"
        required: false
        default: ""

jobs:
  publish-package:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - run: pip install -U twine wheel

      - name: Read version
        id: read-version
        run: |

          # override VERSION file with input from dispatch action
          if [ ${{ github.event_name }} == "workflow_dispatch" ]; then
            version_input=${{ github.event.inputs.version }}
            echo $version_input > volue_insight_timeseries/VERSION
          fi

          version=$(<volue_insight_timeseries/VERSION)
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "version is $version"

      - name: Mint API token
        id: mint-token
        run: |
          echo "$ACTIONS_ID_TOKEN_REQUEST_URL"
          echo "$ACTIONS_ID_TOKEN_REQUEST_TOKEN"
          
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          echo "$resp"
          oidc_token=$(jq '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d "{\"token\": ${oidc_token}}")
          api_token=$(jq '.token' <<< "${resp}")
          
          echo "$resp"
          
          # mask the newly minted API token, so that we don't accidentally leak it
          # echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          # echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      
